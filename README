/**********************************************************
* HW 3: Binary Search Trees
* Comp 15
* README
* Clay Kynor
*********************************************************/

Purpose: To implement a BinarySearchTree class that supports multiset (which 
means it can contain duplicate values)

Help Received:
    - TA Office Hours

FILES:
Makefile
    - Provides rules for linking and compiling. Makes working with class 
    linking easier
    
README
    - This file, purpose is to explain the HW3 project and describe contents
    of assignment, as well as testing procedures used for the assignment.
    
BinarySearchTree.cpp
    - Implementation of BinarySearchTree class as declared in 
    "BinarySearchTree.h". Contains functionality of BinarySearchTree class and 
    associated methods.
    
BinarySearchTree.h
    - Header file for the BinarySearchTree class. Declares class variables and
    methods. The implementation of that class can be found in 
    "BinarySearchTree.cpp" file

BST_tests.cpp
    - File containing all of the testing methods for the BinarySearchTree
    class. These tests are described in higher detail later in README.

hw3.cpp
    - hw3 file given for COMP15 assignment. Purpose is to compare output of
    contents of main for template BinarySearchTree class (demo output in 
    hw3.gt) with my BinarySearchTree class.

hw3.gt
    - "Grand truth" file for out of hw3.cpp when template BST executable is run
    hw3.cpp. Purpose is to be compared with "diff" with output in hw3.out

hw3.out
    - Output of my BinarySearchTree class when hw3.cpp is run. Comparing with 
    template hw3.gt shows discrepancies between my BinarySearchTree class and 
    the template class.

Compile and run (look @ makefile for "make" rules or run following in terminal)
    make clean
    make hw3 
    ./hw3



TESTING:
Method tests for the BinarySearchTree were relatively simple as long as I made
sure to identify edge cases. Similarly since many of the method are 
implemented recursively, I had to be careful about Valgrind/memory issues 
during my BinarySearchTree method tests. 
To compile and run testing methods as found in BST_tests.cpp used 
terminal command:
    make BST_tests
    ./BST_tests


default constructor test - BinarySearchTree:
    - I created a function to run the BST default constructor to make sure 
      there are no runtime errors or memory leaks. 
    - Default constructor should simply initialize class' members to default 
      values.
copy constructor test - BinarySearchTree:
    - Tested the copy constructor by creating copy BinarySearchTrees of BSTs
      with multiple amounts of Nodes (empty, one Node, copying a BST with 100 
      Nodes).
destructor test - BinarySearchTree:
    - Used valgrind before running ./BST_tests executable
Node count and total count method tests - BinarySearchTree:
    - Created an empty BST, a BST w/ one character, and a BST with
      multiple characters. Then printed node_count() and total_count()
      to output and checked to see if output was same as expected.
find_min() and find_max() methods - BinarySearchTree:
    - Tested the find_min and find_max methods by creating BinarySearchTrees
      with multiple amounts of Nodes (empty, one Node, copying a BST with 100 
      Nodes) and then using find_min() and find_max method and outputting
      result
            - Note: Spec describes calling find_min() on empty tree should 
            return the largest possible integer. Similarly, find_max() on 
            empty tree should return the smallest possible integer, used cout
            w/ methods on empty BST to assess it's correct.
contains method - BinarySearchTree:
    - Created an empty BST, a BST w/ one character, and a BST with
      multiple characters. Then outputted results of the contains method when
      value both was and wasn't in those BinarySearchTrees. Then used cout on
      boolean value returned by contain to check if output was as expected.
insert method - BinarySearchTree:
  - Created an empty BST, a BST w/ one character, and a BST with
    multiple characters by using BinarySearchTree class' private insert method.
    Then outputted results and used print_tree method to determine if 
    BinarySearchTree has Nodes added to it correctly.
assignment operator overload - BinarySearchTree:
  - Created an empty BST, a BST w/ one character, and a BST with
    multiple characters by using BinarySearchTree class' assignment operator 
    overload "=" operator and then outputted results and used total_count 
    method to determine if BinarySearchTrees contain the correct information.
tree height method - BinarySearchTree:
  - Created an empty BST, a BST w/ one character, and a BST with
    multiple characters by using BinarySearchTree class' private insert method.
    Then outputted results of tree_height public method and outputted the 
    height of the tree to determine if BinarySearchTree tree_height method 
    returns the correct height value.
print_tree method - BinarySearchTree:
  - This method was given to us and wasn't altered so theoretically it doesn't
  have to be tested. However, this function was tested constantly (despite not
  having its own testing function) in other testing functions that directly 
  tested other methods, but since print_tree method was used to assess the 
  accuracy of the modifications to the BinarySearchTree, the print_tree method
  was tested, despite not having an individual function for its testing.
remove method tests - BinarySearchTree:
  - Because of the complexities of the remove method and the different ways to
  rearrange the BinarySearchTree. The following ways were all of the edge 
  cases that I could think of to test!
  
  Node is nullptr (base case for recursive function):
        - This means there isn't a node with value searching for to delete 
        - Return false 
  Node has a higher/lower value than the one searching for:
        - Recursive case 
        - Call the delete function on the next Node in the tree 
            - If node is higher, call on left Node
            - If node is lower, call on right Node
  The last case is the most complicated - we find the Node has the value we 
  were searching for:
        - Return true (because we found the value)
        - If the "count" tracker is greater than one:
            - Decrement the count
        - If the "count" tracker is one:
            - Check if node has children and then rotate/swap nodes correctly
              based on the amount of child nodes to correctly construct the 
              BinarySearchTree.
  
  Note:  if Node has two children:
       Find replacement for the Node (use find_min or find_max to find
       which Node to replace) (find_min on right side to find 
       replacement)
       - Then just swap Node being replaced with that one

All of these above factors I tried to test for in "BST_tests.cpp" under the 
function BST_remove_tests()


    The last way that I tested the BinarySearchTree class was to create the 
    hw3.out and hw3.gt files.
hw3.gt - "Grand truth" file for out of hw3.cpp when template BST executable is 
run on hw3.cpp. Purpose is to be compared with "diff" with output in 
hw3.out which is the output of MY BinarySearchTree class when hw3.cpp is run.

(From COMP15 HW3 spec) 
    In addition, answer the following questions in your README:

Review the remove function explanation in the homework specification. Will 
your implementation of the remove function use (the privately defined) 
find_min() or find_max()? Why?

My implementation of the privately-defined remove() method will use the 
find_min() function, however only when removing a Node with two children.
When using the remove() method on a Node with two children, we can use 
the find_min() method on the Node to the right of the Node being removed to
find it's replacement in the BinarySearchTree.

Is it possible for (the privately defined) find_min() or find_max() to 
return a value that does not point to a valid node? Why or why not?
    Notes:
    - No it's not possible for this function to not return a valid node. If 
    the tree is empty, this PRIVATE methods won't be called (instead the 
    public method returns smallest or largest possible integer, as described
    in the homework spec)

a) If you answered yes to Q2, then what value is returned? In what case will 
that value be returned?

b) If you answered no to Q2, then then consider the tree below and specify the 
node returned when find_min() is invoked on the right child of the node with 
value of 5:
    I answered no to the above question, which means that when find_min() is 
    called on the right child of the 5 Node, the "smallest possible integer"
    is returned because that tree is empty. This is as the spec specifies.

                2
               / \
              1   5
             /   /
            0   4

Pseudocode for private find_min() function (recursive).
    Base Case:  When the node to left of the current node is nullptr (meaning
    current node is the left-most node in the subtree) then return the value 
    of that Node.
    Recursive Case: Call find_min function on the node to the left of the 
    current node (when that node exists, if it doesn't exist than we are at
    the base case.)

Pseudocode for private find_max() function (recursive).
    Base Case:  When the node to right of the current node is nullptr (meaning
    current node is the right-most node in the subtree) then return the value 
    of that Node because that would be the maximum value.
    Recursive Case: Call find_max function on the node to the right of the 
    current node (when that node exists, if it doesn't exist than we are at
    the base case.)

Pseudocode for your private burn_tree() function.
    Don't have a private burn_tree() function, but I suspect this question
    means to ask about the post_order_delete() method.
    Pseudocode for post_order_delete():
        - Recursively call the function until reaching a Node with no children
        Nodes, then delete each node and return that recursive case. The base
        case is when the function reaches the root (as it should set the root
        to nullptr after all of the Nodes in the tree are deleted).


Time Spent on Homework: 18 hours